{"version":3,"file":"component---src-pages-index-js-280b993d4f3383b37aec.js","mappings":"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","sources":["webpack://Traverse/./src/components/seo.js","webpack://Traverse/./src/components/bio.js","webpack://Traverse/./src/pages/index.js","webpack://Traverse/./src/pages/index.module.css"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.jpg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <div>\n          <p>Personal blog by <a href={`https://twitter.com/${social?.twitter || ``}`}>{author.name}</a></p>\n          <p>{author?.summary || null}</p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nimport * as styles from \"./index.module.css\";\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"Posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"Home\" />\n      {/* <Bio /> */}\n      <ol className={styles.post}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li className={styles.article} key={post.fields.slug}>\n              <article\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n","// extracted by mini-css-extract-plugin\nexport var article = \"index-module--article--16cc5\";\nexport var post = \"index-module--post--c25f7\";"],"names":["Seo","_ref","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","React","Helmet","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","_data$site$siteMetada","_data$site$siteMetada2","data","author","className","StaticImage","layout","formats","src","width","height","quality","alt","__imageData","require","href","summary","location","siteTitle","posts","allMarkdownRemark","nodes","length","Layout","Bio","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","excerpt"],"sourceRoot":""}