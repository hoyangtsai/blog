{"componentChunkName":"component---src-templates-blog-post-js","path":"/boyer-moore-majority-voting-algorithm/","result":{"data":{"site":{"siteMetadata":{"title":"Traverse"}},"markdownRemark":{"id":"ef6c2384-dcd7-51c5-b7a8-32360531d3b5","excerpt":"Boyer-Moore majority voting algorithm 是一個用線性時間和常數空間尋找元素序列中佔多數的元素 https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm 可以解決的問題，如 Leetcode…","html":"<p>Boyer-Moore majority voting algorithm 是一個用<strong>線性時間</strong>和<strong>常數空間</strong>尋找元素序列中佔多數的元素</p>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm</a></p>\n</blockquote>\n<p>可以解決的問題，如 Leetcode <a href=\"https://leetcode.com/problems/majority-element/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">169. Majority Element</a></p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">Given an array nums of size n, return the majority element.\n\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.\n\nExample 1:\n\nInput: nums = [3,2,3]\nOutput: 3\nExample 2:\n\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2</code></pre></div>\n<p>比較簡單直覺的做法是用一個 hash table 紀錄每個數字出現的次數和最大的計數</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">majorityElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> counts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> candidate <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> maxCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> n <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>counts<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      counts<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    counts<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> counts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// if the number's count greater than the maxCount</span>\n    <span class=\"token comment\">// The current number is the majority of the element</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>counts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> maxCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      maxCount <span class=\"token operator\">=</span> counts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      candidate <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> candidate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這個解法的複雜度為</p>\n<ul>\n<li>Time Complexity: O(n)</li>\n<li>Space Complexity: O(n)，需要一個 n 陣列長度的 map 紀錄每個數字出現次數。</li>\n</ul>\n<p>如果要用 <strong>O(1) Space</strong> 解決這個問題就要用到 Boyer-Moore majority voting algorithm</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">majorityElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> candidate <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> n <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// when count is zero takes any number as a candidate</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      candidate <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// if the current number is not the candidate number</span>\n    <span class=\"token comment\">// the count subtracts 1, vice versa adds 1</span>\n    count <span class=\"token operator\">+=</span> n <span class=\"token operator\">==</span> candidate <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> candidate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其他相關問題</p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/majority-element-ii/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">229. Majority Element II</a></li>\n<li><a href=\"https://leetcode.com/problems/check-if-a-number-is-majority-element-in-a-sorted-array/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">1150. Check If a Number Is Majority Element in a Sorted Array</a></li>\n</ul>","frontmatter":{"title":"Boyer-Moore majority voting algorithm","date":"October 21, 2023","description":"一個用線性時間和常數空間 O(1) 複雜度演算法尋找佔多數的元素","tags":["algorithm"],"donation":null}},"previous":{"fields":{"slug":"/uBlock-origin-1p-filters/"},"frontmatter":{"title":"uBlock Origin 黑魔法隱藏 Youtube Shorts 短影片"}},"next":null},"pageContext":{"id":"ef6c2384-dcd7-51c5-b7a8-32360531d3b5","previousPostId":"84999286-8a93-5463-889d-feb02e8005ce","nextPostId":null}},"staticQueryHashes":["2841359383"]}